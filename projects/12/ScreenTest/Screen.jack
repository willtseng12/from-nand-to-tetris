// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean blackPixel, whitePixel, color;
    static int screenSize, screenAddress;

    /** Initializes the Screen. */
    function void init() {
        let screenAddress = 16384; // base address of screen
        let blackPixel = 1;
        let whitePixel = 0;
        let color = blackPixel;
        let screenSize = 8192;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(screenAddress + i, whitePixel);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int bits, position, mask;

        let address = (y * 32) + (x / 16);

        let bits = Memory.peek(screenAddress + address);
        let position = Math.mod(x, 16);
        let mask = Math.twoToThePower(position);

        if (color = blackPixel) {
            do Memory.poke(screenAddress + address, bits | mask);
        } else {
            do Memory.poke(screenAddress + address, bits & (~mask));
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int wordColor, x, xDiv16;

        if (x1 > x2) {
            do Screen.drawHorizontalLine(x2, x1, y);
            return;
        }

        if (black) {
            let wordColor = -1;
        } else {
            let wordColor = 0;
        }

        let x = x1;

        while (~(x > x2)) {
            let xDiv16 = x / 16;

            if ((x = (xDiv16 * 16)) & ((x  + 15) < x2)) {
                do Memory.poke(16384 + (y * 32) + xDiv16, wordColor);
                let x = x + 16;
            } else {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
        }

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, x, y, adyMinusbdx;
        var boolean dxNegative, dyNegative;

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // dx and dy are the total offset from the origin.
        let dx = Math.abs(x2 - x1);
        let dxNegative = x2 < x1;
        let dy = Math.abs(y2 - y1);
        let dyNegative = y2 < y1;

        // a and b are the current offset from the origin.
        let a = 0;
        let b = 0;

        // At each step, we decide whether to increment a or b by comparing a/dx and b/dy.
        // To avoid doing divisions, we can compare a*dy and b*dx.
        let adyMinusbdx = 0;

        while (~((a > dx) | (b > dy))) {
            if (dxNegative) { let x = x1 - a; } else { let x = x1 + a; }
            if (dyNegative) { let y = y1 - b; } else { let y = y1 + b; }

            do Screen.drawPixel(x, y);

            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;

        while (~(y < y2)) {
            do Screen.drawHorizontalLine(y, x1, x2);
            let y = y - 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int rSquared;

        let dy = -r;
        let rSquared = r * r;
        while ( ~(dy > r) ) {
            let dx = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawHorizontalLine(y + dy, x - dx, x + dx);
            let dy = dy + 1;
        }
        return;
    }
}
