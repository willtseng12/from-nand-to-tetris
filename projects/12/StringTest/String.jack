// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length, bufferLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }

        let str = Array.new(maxLength);
        let bufferLength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < bufferLength) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNegative;
        var int valSoFar, i;

        if (str[0] = 45) {
            let isNegative = true;
            let i = 1;
        } else {
            let isNegative = false;
            let i = 0;
        }

        let valSoFar = 0;

        while ((i < length) & String.isDigit(str[i])) {
            let valSoFar = (10 * valSoFar) + (str[i] - 48); // 48 is 0
            let i = i + 1;
        }

        if (isNegative) {
            return -valSoFar;
        } else {
            return valSoFar;
        }
    }


    function boolean isDigit(char c) {
        // 0-9 are ascii codes 48-57.
        return (c > 47) & (c < 58);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean isNegative;

        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do setIntRec(val);
        return;
    }

    method void setIntRec(int val) {
        var int q, lastDigit;

        let q = Math.divide(val, 10);
        let lastDigit = Math.mod(val, 10);

        if (val < 10) {
            do appendChar(lastDigit + 48); // 48 is 0 in ascii
        } else {
            do setIntRec(q);
            do appendChar(lastDigit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
