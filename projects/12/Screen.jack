// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    var boolean blackPixel, whitePixel, color;
    var int screenSize, screenAddress;

    /** Initializes the Screen. */
    function void init() {
        let screenAddress = 16384; // base address of screen
        let blackPixel = 1;
        let whitePixel = 0;
        let color = blackPixel;
        let screenSize = 8192
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0
        while (i < 8192) {
            Memory.poke(screenAddress + i, whitePixel)
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address
        var int bits, position, mask;

        let address = (y * 32) + (x / 16);

        let bits = Memory.peek(screenAddress + address);
        let position = Math.mod(x, 16);
        let mask = Math.twoToThePower(position);

        if (color = blackPixel) {
            do Memory.poke(screenAddress + address, bits | mask);
        } else {
            do Memory.poke(screenAddress + address, bits & (~mask));
        }
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp;



        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
        } else {
             if (dy = 0) {
                do Screen.drawHorizontalLine(y1, x1, x2);
            } else {
                do Screen.drawDiagonalLine(x1, x2, y1, y2);
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int i;

        // make sure y1 < y2
         if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let i = y1;

        while (i < y2 + 1) {
            do Screen.drawPixel(x, i);
            let i = i + 1;
        }
        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2) {
        var int i;
        let i = x1;

        // we already made sure that x1 < x2 in the drawLine call

        while (i < x2 + 1) {
            do Screen.drawPixel(y, i);
            let i = i + 1;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b, diff, incr;

        let a = 0;
        let b = 0;
        let diff = 0;

        if (dy < 0) {
            let incr = -1;
        } else {
            let incr = 1;
        }

        while (~(a > dx) &
                (((incr = 1) & ~(b > dy)) | // going upward
                ((incr = -1) & ~(b < dy)))) {  // going downward

            do Screen.drawPixel(x1 + a, y1 + b );
            if (diff < 0 ) {
                let a = a + 1;
                let diff = diff + (dy * incr); // handles going up or down case
            }
            else {
                let b = b + incr;
                let diff = diff - dx;
            }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;

        while (~(y < y2)) {
            do Screen.drawHorizontalLine(y, x1, x2);
            let y = y - 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int rSquared;

        let dy = -r;
        let rSquared = r * r;
        while ( ~(dy > r) ) {
            let dx = Math.sqrt(r_squared - (dy * dy));
            do Screen.drawHorizontalLine(y + dy, x - dx, x + dx,);
            let dy = dy + 1;
        }
        return;
    }
}
