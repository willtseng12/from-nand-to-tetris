// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // determine what type of instruction
    And(a=true, b=instruction[15], out=isInstructionC);
    Not(in=isInstructionC, out=isInstructionA);
    
    // destination bit, matters only for the case of instruction C
    And(a=instruction[5], b=isInstructionC, out=storeInA);
    And(a=instruction[4], b=isInstructionC, out=storeInD);
    And(a=instruction[3], b=isInstructionC, out=writeM);
    
    // what goes in the A register ALU output or instruction
    // only load the instruction into register A if it's instruction A
    Mux16(a=aluout, b=instruction, sel=isInstructionA, out=registerAInsert);
    
    // store in Register A only if destination bit if it's instruction A or destination bit is store in A
    Or(a=isInstructionA, b=storeInA, out=shouldStoreA);
    Register(in=registerAInsert, load=shouldStoreA, out=regA, out[0..14]=addressM);
    
    // store ALU output in D register?
    Register(in=aluout, load=storeInD, out=registerD);
    
    // what goes in as one of the ALU, either M register or A register, the 12 bit tells you that
    Mux16(a=regA, b=inM, sel=instruction[12], out=inputALU);
    
    // ALU computation
    ALU(x=registerD, y=inputALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=aluout, out=outM, zr=zrout, ng=ngout);
    
    
    // determine jump bit
    // no jump
    Not(in=true, out=nojmp);
    // > 0
    Not(in=jle, out=jgt);
    // == 0
    And(a=true, b=zrout, out=jeq);
    // >= 0
    Or(a=zrout, b=jgt, out=jge);
    // < 0
    And(a=true, b=ngout, out=jlt);
    // is not Zero
    Not(in=zrout, out=jne);
    // <= 0
    Or(a=zrout, b=ngout, out=jle);
    //jump
    Not(in=false, out=jmp);
    
    Mux8Way (a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp, sel=instruction[0..2], out=jumpcond);
    And(a=isInstructionC, b=jumpcond, out=tojmp);
    
    // Program counter
    Not(in=tojmp, out=notToJmp);
    PC(in=regA, load=tojmp, inc=notToJmp, reset=reset, out[0..14]=pc);
}